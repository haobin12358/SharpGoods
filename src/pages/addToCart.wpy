<template>
    <view class="page_hd">
        <view class="goods-img">
            <image src="{{commodity.PRimage}}"></image>
        </view>
        <view class="goods-detail">
            <view class="name">{{commodity.PRname}}</view>
            <view class="price">￥{{commodity.PRprice}}</view>
        </view>
        <view class="selected-goods-price">
            ￥选中价格
        </view>
    </view>
    <view class="page_bd">
        <scroll-view scroll-y="true" class="scroll-area" >
            <view class="opt-box" wx:for="{{pick}}" wx:key="key" wx:for-index="ex" data-id="item.id">
                <view class="title">{{item.name}}</view>
                <view class="items">
                    <view class="item {{ option.its == selected[ex] ? 'active' :'' }} {{ option.able ? '': 'disabled'}}"
                          wx:for="{{item.choice}}" wx:key="key2" wx:for-item="option" @tap.stop="setProperty" data-data="{{option}}"
                          data-id="{{item.id}}" data-able="{{option.able}}" data-a="{{option.its}}"
                          data-b="{{selected[ex]}}">
                        {{option.its}}
                    </view>
                </view>
            </view>
        </scroll-view>
        <view class="count-box">
            <view class="title">购买数量</view>
            <view class="m-purchase-count">
                <view class="m-minus {{item.number==1? 'm-minus-disabled' : ''}}" catchtap="minusTap" data-index="{{index}}">-</view>
                <view class="m-commodity-count">{{count}}</view>
                <view class="m-plus" catchtap="plusTap" data-index="{{index}}">+</view>
            </view>
        </view>
        <view class="confirm_btn" @tap.stop="confirmPurchase">确定</view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import tip from '../utils/tip'
    import api from '../api/api';

    export default class ShopCart extends wepy.page {
        config={
            navigationBarTitleText: '商品详情'
        }

        data = {
            commodity: {
                PRimage: '',
                PRprice: 100,
                PRname: '化妆镜',
            },
            version: '',
            color: '',
            pick: [{name: '版本选择'}, {choice: [{its:1.0, able: true}, {its:2.0, able: true}]},{name: '颜色选择', choice: [ {its: '红' , able: true},{its: '蓝', able: true},{its: '白', able: true} ]} ],
            selected: ['','', '', '', ''],  //  记录每个类别选中项
            selectable: [[], [], [], [], []],
            num: 0,
            count: 1,
            selectVersion: '',
            selectColor: '',
        }
        computed = {}

        /**
         *   获取商品数据  调整数据格式
         *   PRquality: {BRno: {name: "版本选择", choice: ["1.0", "2.0"]}, {name: "版本选择", choice: ["1.0", "2.0"]}}
         *   pick: [{name: '版本选择'}, {choice: [{its:1.0, able: true}, {its:2.0, able: true}]},{name: '颜色选择', choice: [ {its: '红' , able: true},{its: '蓝', able: true},{its: '白', able: true} ]} ],
         */
        async getProductInfo(params){
            let that = this;
            let res = await api.getProductInfo({query: {PRid: params}})

            if(res.data.status == '200'){
                let loop = res.data.data.PRquality;
                let result = []
                let j = 0

                that.commodity = res.data.data;
                for(let i in loop){
                    loop[i].id = j;
                    loop[i].query = i;    //loop : {i : {id: , query: '', name: '', choice: []}}
                    result[j] = loop[i];  //result : [query: '', id: , choice: [  {able: true, its: },   ]

                    let len2 = loop[i].choice.length
                    let temp = '';
                    for( let x = 0; x<len2; x++ ){
                        temp = result[j].choice[x]
                        result[j].choice[x] = {}
                        result[j].choice[x].able = true;
                        result[j].choice[x].its = temp;
                    }
                    j++;
                }
                this.pick = result;
                this.$apply();
            }else {
                tip.error("服务器开小差啦")
            }
        }

        async getPBid(token, query){
            let PRid = this.commodity.PRid
            let res = await api.getPBid({token: token, PRid: PRid, query: query, method: 'POST'})

            return res.data.data.PBid
        }

        //  获得可选项
        async getLeft(token, query){
            let PRid = this.commodity.PRid
            let res = await api.getLeft({query: query, token: token, method: 'POST', PRid: PRid})
            let data = res.data.data;

            return data;
        }

        /**
         * 加入购物车
         * @param token
         * @param query
         * @returns {Promise<void>}
         */
        async doPurchase (token, query) {
            let that = this;
            let res = await api.operateCart({token: token, method: 'POST', query: query})

            if(res.data.status == 200 ){
                wepy.navigateBack({
                    delta: 1
                });

                tip.success('加入购物车成功');
            }else{
                tip.error('添加购物车失败,请重试!');
            }
        }

        //  将所有选项重置为query(bool)
        setTrue(query){
            let x, z ;
            let len = this.pick.length

            for(x = 0; x<len; x++ ){
                let len2 = this.pick[x].choice.length

                for(z=0; z<len2; z++)
                    this.pick[x].choice[z].able = query;
            }
        }

        methods = {
            // 点击数量+
            plusTap(){
                this.count ++;
            },

            //  点击数量-
            minusTap(){
                let count = this.count
                if(count>1){
                    this.count --;
                }
            },

            //  选中类别
            async setProperty(e) {
                let that = this;
                //  类别数
                let len = this.pick.length
                let token =  wepy.getStorageSync('token')
                //设置已选
                let data = e.currentTarget.dataset.data;
                let id = e.currentTarget.dataset.id;
                let able = e.currentTarget.dataset.able; //可选

                this.$apply();
                if(able){
                    //  取消选中
                    if (that.selected[id] == data.its) {
                        that.selected[id] = ''
                    }
                    else{//  选中
                        that.selected[id] = data.its;
                    }
                }

                let query = {}
                let get = true;

                //  循环所有类别  对已选中的进行过滤
                for(let i = 0; i<len; i++){
                    if(this.selected[i] != ''){
                        let key = that.pick[i].query;
                        let position = that.selected[i]

                        //  组成查询参数
                        query[key] = position
                        //  需要进行查询
                        get = false
                    }
                }

                if(!get){
                    //  获得可选项
                    let loop = await this.getLeft(token, query);
                    let x, y, z ;

                    x=0;
                    //  先重置后将可选项显示出来
                    this.setTrue(false)
                    for(let i in loop){
                        let len2 = loop[i].length
                        let len3 = that.pick[x].choice.length

                        for(y = 0; y<len2; y++ ){
                            for(z=0;z<len3;z++)
                                if(that.pick[x].choice[z].its == loop[i][y])
                                    that.pick[x].choice[z].able = true
                        }
                        x++;
                    }
                    that.$apply()
                } else {
                    //  未选中时重置为全部可选
                    this.setTrue(true)
                    that.$apply()
                }
            },

            //  确认添加购物车
            async confirmPurchase(){
                let token =  wepy.getStorageSync('token')
                let len = this.pick.length;
                let mess = '';
                let query = {};
                let temp;

                //  从最后一项进行检查
                for (let i = len - 1; i > -1; i--) {
                    if (this.selected[i] == '') {
                        mess = this.pick[i].name ? this.pick[i].name : '某项';
                        break;
                    }

                    temp = this.pick[i].query
                    query[temp] = this.selected[i];
                }

                if (mess != '') {
                    tip.alert('请对'+mess)
                } else {
                    //  添加购物车
                    let num = this.count
                    let PBid = await this.getPBid(token, query)

                    this.doPurchase(token, {PBid: PBid, CAnumber: num})
                }
            }
        }


        events = {}

        onLoad(param) {
            // console.log(param);
            // return;
            this.getProductInfo(param.prId);
        }
    }


</script>

<style lang="less">
    @import "../styles/common.less";
    .page_hd{
        height: 177rpx;
        border-top:  1px solid @border-color;
        border-bottom:  1px solid @border-color;
        padding: 28rpx 37rpx 13rpx 52rpx;
        display: flex;
        .goods-img{
            width: 150rpx;
            height: 150rpx;

            image{
                width: 100%;
                height: 100%;
            }
        }
        .goods-detail{
            flex: 1;
            padding-left: 34rpx;
            color: #666666;

            .name{
                margin-bottom: 26rpx;
               .fz28();
            }

            .price{
                .fz24();
            }
        }
        .selected-goods-price{
            color: @main-color;
            .fz24();
        }
    }

    .page_bd{
        .scroll-area{
            width: 100%;
            height: 542rpx;
            padding-top: 32rpx;
            /*padding: 32rpx 41rpx 0rpx 52rpx;*/

            /*选择列表*/
            .opt-box {
                padding-bottom: 26rpx;
                box-sizing: border-box;
                padding-left: 41rpx;

                .title {
                    .fz28();
                    color: #4c4c4c;
                    margin-top: 10rpx;
                }
                .items {
                    display: flex;
                    flex-wrap: wrap;
                    margin-top: 5rpx;
                    padding-top: 10rpx;

                }
                .item {
                    .fz28();
                    width: 125rpx;
                    height: 64rpx;
                    line-height: 64rpx;
                    background: #ffffff;
                    text-align: center;
                    color: #666666;
                    border: 1px solid @main-color;
                    margin-right: 20rpx;
                    border-radius: 10rpx;
                }
                .active {
                    background: @main-color;
                    color: #fff;
                }
                .disabled {
                    background: #f0f0f0;
                    color: #cccccc;
                    border: 0px;
                }
            }


        }

        /*数量*/
        .count-box {
            display: flex;
            justify-content: space-between;
            align-items: center;
            height: 40rpx;
            box-sizing: border-box;
            padding-left: 41rpx;

            .title {
                color: #666666;
                .fz24();
            }

            .m-purchase-count {
                width: 170rpx;
                height: 40rpx;
                line-height: 40rpx;
                display: flex;
                align-items: center;
                text-align: center;
                padding: 30rpx;
                color: #b3b3b3;
                .fz28();

                .m-minus {
                    width: 40rpx;
                    border: 1px solid #b4b4b5;
                    border-top-left-radius: 8rpx;
                    border-bottom-left-radius: 8rpx;
                }
                .m-minus-disabled {

                }
                .m-plus{
                    width: 40rpx;
                    border: 1px solid #b4b4b5;
                    border-top-right-radius: 8rpx;
                    border-bottom-right-radius: 8rpx;
                }
                .m-commodity-count{
                    width: 90rpx;
                    border-top: 1px solid #b4b4b5;
                    border-bottom: 1px solid #b4b4b5;
                }
            }
        }


        /*确定按钮*/
        .confirm_btn {
            margin: 236rpx auto auto;
            width: 450rpx;
            height: 80rpx;
            line-height: 80rpx;
            background: @main-color;
            text-align: center;
            color: #fff;
            border-radius: 40rpx;

        }
    }


</style>